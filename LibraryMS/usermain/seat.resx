<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAAMQOAADEDgAAAAAAAAAA
        AAALCwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEICAgAAAAABgAAAAQEAwADCgAAAQ8UA1QADCEm
        HG8oH40bF1gpGmQRBk4oG4cqI4wiHIErEWUkIl0ZH2gSE2shInozLUQrKW8eEIAeG48cJnMfF2oqGZIV
        LHAnI4wBDgAEAAcAAAAABAAAAAYEBwAAADoABlEAADcCAG0SBL4XCdkUCLwAAF4ACXMAAKEGCrcAAJIA
        BHMDBHYZDbMbC7wYCLkaCbgYHp0UD64jC80SCqsMAL8JCdkVCrQLBXAAAAkCAAAAAAAABAAAAAcABQAA
        AFEQEXMAEQDBus////7//v/4+Pj/+P/19fsAAArx9/YACgAmK2oACQD7///7/v/3+v4EABTy8PwEANsA
        AOMMAPQCB9ghC74PDpMGDzUAAAMABAAAAAAABgAAAAcABAAAB4ARD68ABQD2/+H//v8CAQAAAQD/+vv/
        //j//f////z8/PYGDQALAA///v///f7//v/9/+b/9P8dMoMhI58AAFQSAOEgAMcaELAKAGUBAgAAAgAA
        AAAAAgMAAgAAAAwHBZQAAJEACwj6+P/4+Pj////29vb////5+fn////////////////////5+fn39/f2
        9vYqIDD6+vonKZkpKZMAAFMAAPkODLwGALgGBJ4HAw8CAAMAAAAAAQUABQAAABEkDsENEXoADgAGABX7
        +/v19fX////////6+voAAAD////////6+vr////9/f0AAADy8vL//P7//f8gIJYAAC4AAFcAAO8AAKYS
        CK4AAIADBAAAAwAAAAAAAgIAAQAAAAgDAkwAAFwAABkADAADAwP9/f0AAAD09PT///8EBAT/////////
        ///x8fH09PQAAAAAAABCOkX8+/0mJpoiKIEAAE4ABOUbFagKAZgKCYcFAwkAAAQAAAAAAAgFAAsABQwU
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>